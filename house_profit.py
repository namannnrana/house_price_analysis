# -*- coding: utf-8 -*-
"""house_profit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w24PYUT7IDcr3hxGR74nsZ0nTW4eKI2b
"""

import numpy as np
import pandas as pd
from numpy import math
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

# Load dataset
dataset = pd.read_csv('housing.csv')

len(dataset)

# Display basic info
dataset.info()
print("Dataset shape:", dataset.shape)
print("Dataset preview:\n", dataset.head())

dataset.shape

plt.scatter(dataset['CRIM'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with CRIM')
plt.xlabel('CRIM')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['ZN'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with ZN')
plt.xlabel('ZN')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['INDUS'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with INDUS')
plt.xlabel('INDUS')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['CHAS'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with CHAS')
plt.xlabel('CHAS')
plt.ylabel('MEDV')
plt.show()

dataset.head()

plt.scatter(dataset['NOX'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with NOX')
plt.xlabel('NOX')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['RM'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with RM')
plt.xlabel('RM')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['AGE'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with AGE')
plt.xlabel('AGE')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['DIS'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with DIS')
plt.xlabel('DIS')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['RAD'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with RAD')
plt.xlabel('RAD')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['TAX'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with TAX')
plt.xlabel('TAX')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['PTRATIO'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with PTRATIO')
plt.xlabel('PTRATIO')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['B'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with B')
plt.xlabel('B')
plt.ylabel('MEDV')
plt.show()

plt.scatter(dataset['LSTAT'], dataset['MEDV'], alpha  = 0.5)
plt.title('Scatter plot of MEDV with LSTAT')
plt.xlabel('LSTAT')
plt.ylabel('MEDV')
plt.show()

# Check for multicollinearity using correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(dataset.corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

# Remove highly correlated features if necessary (manual step based on heatmap)

# Handling outliers in MEDV (if needed)
plt.boxplot(dataset['MEDV'])
plt.title('Boxplot of MEDV')
plt.show()

dependent_variable = 'MEDV'
independent_variable = list(set(dataset.columns.tolist()) - {dependent_variable})

#standardizing the dataset
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

x = dataset[independent_variable].values
y = dataset[dependent_variable].values

# splitting the dataset into the Training set and Test set
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# Fitting Multiple Linear Regression to the Training set
regressor = LinearRegression()
regressor.fit(x_train, y_train)

regressor.intercept_

regressor.coef_

y_pred_train = regressor.predict(x_train)

y_train

# Predicting the Test set results
y_pred = regressor.predict(x_test)

#Predicted profit on the test data
y_pred

# Actual profits on test data
y_test

mean_squared_error(y_test, y_pred)

# Train performance
math.sqrt(mean_squared_error(y_train, y_pred_train))

# Test performance
math.sqrt(mean_squared_error(y_test, y_pred))

r2_score(y_train, y_pred_train)

